# Logging template for files
# import logging
# import logging.config
# logging.config.fileConfig('/nas/settings/logging.cfg')
# log = logging.getLogger('standard')

#These are the loggers that are available from the code
#Each logger requires a handler, but can have more than one
[loggers]
keys=root,standard,debugging,debugging_plus
# standard: Don't write DEBUG to file (don't propgate)
# root: Don't screen DEBUG
# debugging: Don't screen DEBUG (don't propgate)
# debugging_plus: screen DEBUG (don't propgate)
# Logging Levels
# CRITICAL 50
# ERROR	   40
# WARNING  30
# INFO	   20
# DEBUG	   10
# NOTSET   0

#Each handler requires a single formatter
[handlers]
keys=fileHandler, consoleHandler, consoleDebugHandler

[formatters]
keys=logFormatter


[logger_root]
level=DEBUG
handlers=fileHandler, consoleHandler

[logger_standard]
# Since level is INFO, "<INFO" levels will be masked from all handlers.
# Use for not writing DEBUG messages to log file
level=INFO
handlers=fileHandler, consoleHandler
qualname=standard
#propagate=0 Does not pass messages to ancestor loggers(root)
propagate=0

[logger_debugging]
# Since level is DEBUG, "<DEBUG" levels will be masked from all handlers.
# Use for not writing NOTSET messages to log file
level=DEBUG
handlers=fileHandler, consoleHandler
qualname=debugging
#propagate=0 Does not pass messages to ancestor loggers(root)
propagate=0

[logger_debugging_plus]
# Move also DEBUG messages to console
level=DEBUG
handlers=fileHandler, consoleDebugHandler
qualname=debugging_plus
#propagate=0 Does not pass messages to ancestor loggers(root)
propagate=0

# Do not use a console logger when running scripts from a bat file without a console
# because it hangs!
[handler_consoleHandler]
class=StreamHandler
level=INFO
formatter=logFormatter
#formatter=consoleFormatter
args=(sys.stdout,)# The comma is correct, because the parser is looking for args


[handler_fileHandler]
class=FileHandler
level=DEBUG
formatter=logFormatter
# This causes a new file to be created for each script
# Change time.strftime("%Y%m%d%H%M%S") to time.strftime("%Y%m%d")
# And only one log per day will be created. All messages will be amended to it.
#args=("log/" + time.strftime("%%Y%%m%%d__%%H-%%M-%%S")+'.log', 'a')
args=("log/" + time.strftime("%%Y%%m%%d")+'.log', 'a')

[handler_consoleDebugHandler]
class=StreamHandler
level=DEBUG
formatter=logFormatter
#formatter=consoleFormatter
args=(sys.stdout,)# The comma is correct, because the parser is looking for args

[formatter_logFormatter]
#name is the name of the logger root or pipeline
#levelname is the log message level debug, warn, ect 
#lineno is the line number from where the call to log is made
#04d is simple formatting to ensure there are four numeric places with leading zeros
#4s would work as well, but would simply pad the string with leading spaces, right justify
#-4s would work as well, but would simply pad the string with trailing spaces, left justify
#filename is the file name from where the call to log is made
#funcName is the method name from where the call to log is made
#format=%(asctime)s | %(lineno)d | %(message)s
#format=%(asctime)s | %(name)s | %(levelname)s | %(message)s
#format=%(asctime)s | %(name)s | %(module)s-%(lineno) | %(levelname)s | %(message)s
#format=%(asctime)s | %(name)s | %(module)s-%(lineno)04d | %(levelname)s | %(message)s
#format=%(asctime)s | %(name)s | %(module)s-%(lineno)4s | %(levelname)-8s | %(message)s

#format=%(asctime)s | %(levelname)-8s | %(lineno)04d | %(message)s
#format=%(asctime)s | %(levelname)-8s | %(filename)s-%(funcName)s-%(lineno)04d | %(message)s
format=%(asctime)s | %(levelname)-8s | %(name)s-%(funcName)s-%(lineno)04d | %(message)s

#Use a separate formatter for the console if you want
# [formatter_consoleFormatter]
# format=%(asctime)s | %(levelname)-8s | %(filename)s-%(funcName)s-%(lineno)04d | %(message)s

